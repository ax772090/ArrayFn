1、join（）
Array.join()方法将数组中所有元素都转化为字符串并连接在一起，返回最后生成的字符串。可以指定一个可选的字符串在生成的字符串类分隔数组的各个元素。若果不指定分隔符，默认使用逗号；例：
var  a = [1,2,3,4]     //创建一个包含三个元素的数组
a.join();             //=> “1,2,3,4”
a.join(“ ”)           //=>”1 2 3 4”
a.join(“”)            //=>”1234”
var b = new Array(10);  //长度为10的空数组
b.join(‘-‘)             //=>’---------’:9个连字号组成的字符串，即"---------"
Array.join()方法是String.split()方法的逆向操作，后者是将字符串分割成若干块来创建一个数组。
2、reverse（）
Array.reverse()方法将数组中的元素颠倒顺序，返回逆序的数组；例：
var a = [1,2,3,4,5,6,]; 
a.reverse();  //=>结果是：[6, 5, 4, 3, 2, 1]
a.reverse().join();  //=> "1,2,3,4,5,6"
a.reverse();       //=> [6, 5, 4, 3, 2, 1]
3、sort（）
Array.sort()方法将数组中的元素排序并返回排序后的数组；当不带参数调用sort()时，数组元素以字母表顺序排序；若数组包含undefined元素，它们会被排到数组的尾部；
无参数例：
var  a = new Array(“hello”,”wolrd”,”javascript”,”web”);
a.sort();   //=> ["hello", "javascript", "web", "wolrd"]
为了按照其他方式而非字母表顺序进行数组排序，必须给sort()方法传递一个比较函数。例：
var a = [55,333,66,11,0};
a.sort();   // => [0, 1111, 333, 55, 66]
a.sort(function(a,b){return b-a});  //=> [1111, 333, 66, 55, 0]
a.sort(function(a,b){return a-b});  //=> [0, 55, 66, 333, 1111]
4、concat（）
Array.concat（）方法创建并返回一个新数组，它的元素包括调用conocat（）的原始数组的元素和concat（）的每个参数。若这些参数中的任何一个自身是数组，则连接的是数组的元素，而非数组本身；同时concat（0不会递归扁平化数组的属猪，也不会修改调用的数组；例：var a = [1,2,3];
a.concat(4,5);  //=> [1, 2, 3, 4, 5]
a.concat([6,7]);   //=> [1, 2, 3, 6, 7]
a.concat([6,7],[7,8]);  //=> [1, 2, 3, 6, 7, 7, 8]
a.concat([6,7],[7,[8,9]]);  //=> [1, 2, 3, 6, 7, 7,[ 8,9]]
5、slice（）
Array.slice()方法返回指定数组的一个片段或子数组。它的两个参数分别指定了片段的开始和结束的位置；返回的数组包含第一个起始参数指定的位置，不包含第二个参数指定的位置；第一个参数是要获取的子串的起始位置，第二个参数（如果使用的话）是要获取子串终止前的位置（也就是说，获取终止位置处的字符不包括在返回的值内）。如果省略第二个参数，终止位就默认为字符串的长度。注意：slice()不会修改调用它的数组，另外，对于负数参数，slice() 方法会用字符串的长度加上参数，substring() 方法则将其作为 0 处理（也就是说将忽略它）例如：
var  a =[1,2,3,4,5,6];
a.slice(0,3);    //=> [1, 2, 3]
a.slice(2);    //=> [3, 4, 5, 6]
a.slice(2,-2);  //=>[3, 4]
a.slice(-4,-2);  //=>[3, 4]
6、splice（）
Array.splice()方法是在数组中插入或删除元素的通用方法，不同于slice（）和concat（），splice（）会修改调用的数组，能够从数组中删除元素，插入元素到数组中或同时完成这两种操作。在插入或删除点之后的数组元素会根据需要增加或减小它们的索引值，因此数组的其他部分仍保持连续的；splice（）的第一个参数指定了插入和删除的起始位置，第二个参数指定了应该从数组中删除的元素的个数。若省略第二个参数，从起始点开始到数组尾部的所有元素都将被删除。Splice()返回一个由删除元素组成的数组，如果没有删除元素，就返回一个空数组，例：
var a = [1,2,3,4,5,6,7,8,9,0];
a.splice(5);  //=>返回结果是：[6, 7, 8, 9, 0]，数组a是[1,2,3, 4, 5]
a.splice(1,2);  //=>返回结果是：[2,3]，数组a是[1, 4, 5]
增加：
var  a = [1,2,3,4,5];
注意：下面的第一个参数指的是插入和删除的起始位置，第二个参数指定了应该从数组中删除的元素的个数，0表示不删除，所以返回[].
a.splice(2,0,’a’,’b’);  //=>返回结果是：[]，数组a是[1,2,’a’,’b’,3, 4, 5]
a.splice(2,2,[1,2],’c’); //=>返回结果是：[‘a’,’b’],数组a是[1,2,[1,2],’c’,3,4,5]
7、push（）和pop（）
Push（）和pop（）方法允许将数组当做栈来使用。Push（）方法在数组的尾部添加一个多多个元素，并返回数组新的长度。Pop（）方法则相反：它删除数组的最后一个元素，减小数组长度并返回它删除的值。例：
var s = [];   //s:[]
s.push(1,2);  //s:[1,2]   返回2
s.pop();    //s:[1]    返回2
s.push(3);   //s:[1,3]  返回2
s.pop();     //s:[1]   返回3
s.push([4,5]);  //s:[1,[4,5]]  返回2
s.pop();     //s:[1]  返回[4,5]
s.pop();     //s.[]   返回1
8、unshift（）和shift（）
Shift()删除首元素；unshift()往首元素添加内容
unshift（）和shift（）方法的行为类似于push（）和pop（），不一样的是前者是在数组的头部而非尾部进行元素的插入和删除操作；unshift（0在数组的头部添加一个或多个元素，并将已存在的元素移动到更高索引的位置来获得足够的空间，并返回数组新的长度；例：
var s = [];   //s:[]
s.unshift(1);  //s:[1]   返回1
s.unshift(22);  //s:[22，1]   返回2
s.shift();   //s:[1]  返回22
s.unshift(3，[4,5]);  //s:[ 3，[4,5]，1]   返回3
s.shift();  //s:[ [4,5],1]  返回3
s.shift();  //s:[ 1]  返回[4,5]
s.shift();     //s.[]   返回1
9、tostring（）和toLocaleString（）
Tostring（）方法将数组中的每个元素转化为字符串，并输出用逗号分隔的字符串列表；例：
[1,”a”,3,”b”].tostring();   //=>"1,a,3,b" 
[1,[2,’c’]].tostring();     //=>"1,2,c"
10、forEach
方法从头到尾遍历数组，函数里面的三个参数分别表示数组元素、元素索引和数组本身。它会修改原数组。
var  a = [1,2,3,4,5];
a.forEach(function(item,index,aData){
    a[index]=item+1;
})
console.log(a)
11、map()
方法返回的是新数组，不修改原数组。
var  a = [1,2,3,4,5];
var b=a.map(function(item,index,aData){
    return item*item;
})
console.log(a);
console.log(b);
12、every()和some()
every()表示当且仅当针对数组中的所有元素调用判定函数都返回true，它才返回true,它在判定函数第一次返回false后就会返回false，不在执行后面的，但如果判定函数一直返回true，那么它就需要一直判定，直到判定完整个数组中的所有元素。
some()表示有一个元素的判定函数是true，那么它就返回true，也不会往下走了。
13、indexOf
返回某个指定的字符串值在字符串中首次出现的位置，对大小写敏感；如果要检索的字符串值没有出现，则该方法返回 -1
var str=”Hello world!”;
str.indexOf(“world”);  //6
14、jQuery中的extend()方法
（1）为了实现默认字段的覆盖，即若传入某个字段的值，则使用传入值，否则使用默认值
function getOpt(option){
    var _default = {
        name : 'wenzi',
        age : '25',
        sex : 'male'
    }
    $.extend(_default, option);
    return _default;
}
getOpt();  // {name: "wenzi", age: "25", sex: "male"}
getOpt({name:'bing'}); // {name: "bing", age: "25", sex: "male"}
getOpt({name:'bing', age:36, sex:'female'});  // {name: "bing", age: 36, sex: "female"}
（2）将两个或更多对象的内容合并到第一个对象
jQuery.extend( target [, object1 ] [, objectN ] )，extend方法需要至少传入一个参数，第一个必需，后面的都是可选参数。若传给extend是两个或两个以上的参数都是对象类型，那么就会把后面所有对象的内容合并给target（第一个对象）上。
function getOpt(target, obj1, obj2, obj3){
    $.extend(target, obj1, obj2, obj3);
    return target;
}
var _default = {
    name : 'wenzi',
    age : '25',
    sex : 'male'
}
var obj1 = {
    name : 'obj1'
}
var obj2 = {
    name : 'obj2',
    age : '36'
}
var obj3 = {
    age : '67',
    sex : {'error':'sorry, I dont\'t kown'}
}
getOpt(_default, obj1, obj2, obj3);  // {name: "obj2", age: "67", sex: {error: "sorry, I dont't kown"}}
从运行的得到结果我们可以看到，属性值永远是最后一个属性的值。
（3）深度拷贝和浅度拷贝
针对什么是深度拷贝，什么是浅度拷贝，我们先来看一个简单的例子。
var obj = {name:'wenzi', sex:'male'};
var obj1 = obj; // 赋值
obj1.name = 'bing';
console.log(obj.name); // bing
我们修改了obj1中的name值，结果obj中的值也跟着发生了变化，这是为什么呢。其实这就是浅度拷贝：这仅仅是将obj对象的引用地址简单的复制了一份给予变量 obj1，而并不是将真正的对象克隆了一份，因此obj和obj1指向的都是同一个地址。当修改obj1的属性或给obj1添加新属性时，obj都会受到影响。
可是如果变量的值不是对象和数组，修改后面的变量是不会影响到前面的变量：
var s = 'hello';
var t = s;
t = 'world';
console.log(s); // hello
那么深度拷贝就不是拷贝引用地址，而是实实在在的复制一份新对象给新的变量。 在上面使用$.extend()中，都是使用的浅度拷贝，因此若后面的参数值是object类型或array类型，修改_default(target)的值，就会影响后面参数的值。
如我们使用getOpt(_default, obj1, obj2, obj3);得到的_default值是{name: “obj2”, age: “67”, sex: {error: “sorry, I dont’t kown”}}，可是若：
_default.sex.error = 'hello world';
那么obj3.sex.error也会跟着修改，因为obj3.sex是一个object类型。
不过$.extend()也提供了深度拷贝的方法：jQuery.extend( [deep ], target, object1 [, objectN ] )。若第一个参数是boolean类型，且值是true，那么就会把第二个参数作为目标参数进行合并。

var obj = {name:'wenzi', score:80};
var obj1 = {score:{english:80, math:90}}
$.extend(true, obj, obj1);
obj.score.english = 10;
console.log(obj.score.english);   // 10
console.log(obj1.score.english);  // 80
执行后我们发现，无论怎么修改obj.score里的值，都不会影响到obj1.score了。
15、_.each()方法
var vmRespList=[1,2,3]
_.each(vmRespList, function (item, index) {
                    console.log(index+”:”+item);
                })
结果：0:1
      1:2
      2:3
16、字符串转数组，数组转字符串
var str = '12345678';
str = str.split('').reverse().join('');
